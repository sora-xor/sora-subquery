specVersion: 1.0.0
name: sora-dev
version: 1.0.0
runner:
  node:
    name: '@subql/node'
    version: 2.10.0
  query:
    name: '@subql/query'
    version: 2.8.0
description: ''
repository: https://github.com/sora-xor/sora-subquery
schema:
  file: ./schema.graphql
network:
  chainId: '0'
  endpoint: wss://ws.framenode-2.r0.dev.sora2.soramitsu.co.jp
  chaintypes:
    file: ./types.json
dataSources:
  - kind: substrate/Runtime
    startBlock: 1
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: initializeAssets
          kind: substrate/BlockHandler
        - handler: initializePools
          kind: substrate/BlockHandler
        - handler: initializeOrderBooks
          kind: substrate/BlockHandler
        - handler: handleAssetRegistration
          kind: substrate/EventHandler
          filter:
            module: assets
            method: AssetRegistered
        - handler: handleSyntheticAssetEnabled
          kind: substrate/EventHandler
          filter:
            module: xstPool
            method: SyntheticAssetEnabled
        - handler: handleBandRateUpdate
          kind: substrate/CallHandler
          filter:
            module: band
            method: relay
        - handler: assetRegistrationHandler
          kind: substrate/CallHandler
          filter:
            module: assets
            method: register
        - handler: handleAssetTransfer
          kind: substrate/CallHandler
          filter:
            module: assets
            method: transfer
        - handler: handleXorlessTransfer
          kind: substrate/CallHandler
          filter:
            module: liquidityProxy
            method: xorlessTransfer
        - handler: handleSwaps
          kind: substrate/CallHandler
          filter:
            module: liquidityProxy
            method: swap
        - handler: handleSwapTransfers
          kind: substrate/CallHandler
          filter:
            module: liquidityProxy
            method: swapTransfer
        - handler: handleSwapTransferBatch
          kind: substrate/CallHandler
          filter:
            module: liquidityProxy
            method: swapTransferBatch
        - handler: handleLiquidityDeposit
          kind: substrate/CallHandler
          filter:
            module: poolXYK
            method: depositLiquidity
        - handler: handleLiquidityRemoval
          kind: substrate/CallHandler
          filter:
            module: poolXYK
            method: withdrawLiquidity
        - handler: handlerIrohaMigration
          kind: substrate/CallHandler
          filter:
            module: irohaMigration
            method: migrate
        - handler: batchTransactionsHandler
          kind: substrate/CallHandler
          filter:
            module: utility
            method: batchAll
        - handler: soraEthTransferHandler
          kind: substrate/CallHandler
          filter:
            module: ethBridge
            method: transferToSidechain
        - handler: rewardsHandler
          kind: substrate/CallHandler
          filter:
            module: pswapDistribution
            method: claimIncentive
        - handler: rewardsHandler
          kind: substrate/CallHandler
          filter:
            module: rewards
            method: claim
        - handler: rewardsHandler
          kind: substrate/CallHandler
          filter:
            module: vestedRewards
            method: claimRewards
        - handler: rewardsHandler
          kind: substrate/CallHandler
          filter:
            module: vestedRewards
            method: claimCrowdloanRewards
        - handler: setReferralHandler
          kind: substrate/CallHandler
          filter:
            module: referrals
            method: setReferrer
        - handler: referralReserveHandler
          kind: substrate/CallHandler
          filter:
            module: referrals
            method: reserve
        - handler: referralUnreserveHandler
          kind: substrate/CallHandler
          filter:
            module: referrals
            method: unreserve
        - handler: demeterDepositHandler
          kind: substrate/CallHandler
          filter:
            module: demeterFarmingPlatform
            method: deposit
        - handler: demeterWithdrawHandler
          kind: substrate/CallHandler
          filter:
            module: demeterFarmingPlatform
            method: withdraw
        - handler: demeterGetRewardsHandler
          kind: substrate/CallHandler
          filter:
            module: demeterFarmingPlatform
            method: getRewards

        - handler: stakingBondCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: bond
        - handler: stakingBondExtraCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: bondExtra
        - handler: stakingCancelDeferredSlashCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: cancelDeferredSlash
        - handler: stakingChillCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: chill
        - handler: stakingChillOtherCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: chillOther
        - handler: stakingForceApplyMinCommissionCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: forceApplyMinCommission
        - handler: stakingForceNewEraCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: forceNewEra
        - handler: stakingForceNewEraAlwaysCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: forceNewEraAlways
        - handler: stakingForceNoErasCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: forceNoEras
        - handler: stakingForceUnstakeCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: forceUnstake
        - handler: stakingIncreaseValidatorCountCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: increaseValidatorCount
        - handler: stakingKickCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: kick
        - handler: stakingNominateCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: nominate
        - handler: stakingPayoutStakersCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: payoutStakers
        - handler: stakingReapStashCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: reapStash
        - handler: stakingRebondCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: rebond
        - handler: stakingScaleValidatorCountCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: scaleValidatorCount
        - handler: stakingSetControllerCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: setController
        - handler: stakingSetInvulnerablesCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: setInvulnerables
        - handler: stakingSetMinCommissionCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: setMinCommission
        - handler: stakingSetPayeeCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: setPayee
        - handler: stakingSetStakingConfigsCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: setStakingConfigs
        - handler: stakingSetValidatorCountCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: setValidatorCount
        - handler: stakingUnbondCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: unbond
        - handler: stakingValidateCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: validate
        - handler: stakingWithdrawUnbondedCallHandler
          kind: substrate/CallHandler
          filter:
            module: staking
            method: withdrawUnbonded
        - handler: stakingRewardedEventHandler
          kind: substrate/EventHandler
          filter:
            module: staking
            method: Rewarded
        - handler: stakingStakersElectedEventHandler
          kind: substrate/EventHandler
          filter:
            module: staking
            method: StakersElected

        - handler: orderBookCreatedEvent
          kind: substrate/EventHandler
          filter:
            module: 'orderBook'
            method: 'OrderBookCreated'
        - handler: orderBookStatusChangedEvent
          kind: substrate/EventHandler
          filter:
            module: 'orderBook'
            method: 'OrderBookStatusChanged'
        - handler: limitOrderPlacedEvent
          kind: substrate/EventHandler
          filter:
            module: 'orderBook'
            method: 'LimitOrderPlaced'
        - handler: limitOrderExecutedEvent
          kind: substrate/EventHandler
          filter:
            module: 'orderBook'
            method: 'LimitOrderExecuted'
        - handler: limitOrderUpdatedEvent
          kind: substrate/EventHandler
          filter:
            module: 'orderBook'
            method: 'LimitOrderUpdated'
        - handler: limitOrderFilledEvent
          kind: substrate/EventHandler
          filter:
            module: 'orderBook'
            method: 'LimitOrderFilled'
        - handler: limitOrderCanceledEvent
          kind: substrate/EventHandler
          filter:
            module: 'orderBook'
            method: 'LimitOrderCanceled'
        - handler: marketOrderEvent
          kind: substrate/EventHandler
          filter:
            module: 'orderBook'
            method: 'MarketOrderExecuted'
        - handler: marketOrderEvent
          kind: substrate/EventHandler
          filter:
            module: 'orderBook'
            method: 'LimitOrderConvertedToMarketOrder'
        - handler: marketOrderEvent
          kind: substrate/EventHandler
          filter:
            module: 'orderBook'
            method: 'LimitOrderIsSplitIntoMarketOrderAndLimitOrder'
        - handler: orderBookPlaceLimitOrderHandler
          kind: substrate/CallHandler
          filter:
            module: orderBook
            method: placeLimitOrder
        - handler: orderBookCancelLimitOrderHandler
          kind: substrate/CallHandler
          filter:
            module: orderBook
            method: cancelLimitOrder
        - handler: orderBookCancelLimitOrderHandler
          kind: substrate/CallHandler
          filter:
            module: orderBook
            method: cancelLimitOrdersBatch
        - handler: ethSoraTransferEventHandler
          kind: substrate/EventHandler
          filter:
            module: ethBridge
            method: IncomingRequestFinalized
        - handler: ethSoraTransferEventHandler
          kind: substrate/EventHandler
          filter:
            module: ethBridge
            method: IncomingRequestFinalizationFailed
        - handler: handleTokenBurn
          kind: substrate/EventHandler
          filter:
            module: tokens
            method: Withdrawn
        - handler: handleXorBurn
          kind: substrate/EventHandler
          filter:
            module: balances
            method: Withdraw
        - handler: handleTokenMint
          kind: substrate/EventHandler
          filter:
            module: tokens
            method: Deposited
        - handler: handleXorMint
          kind: substrate/EventHandler
          filter:
            module: balances
            method: Deposit
        - handler: handleNetworkFee
          kind: substrate/EventHandler
          filter:
            module: xorFee
            method: FeeWithdrawn
        - handler: referrerRewardHandler
          kind: substrate/EventHandler
          filter:
            module: xorFee
            method: ReferrerRewarded
        - handler: handleTransferEvent
          kind: substrate/EventHandler
          filter:
            module: balances
            method: Transfer
        - handler: handleTransferEvent
          kind: substrate/EventHandler
          filter:
            module: tokens
            method: Transfer
        - handler: syncPoolXykPrices
          kind: substrate/BlockHandler
        - handler: syncStreams
          kind: substrate/BlockHandler
        - handler: syncModels
          kind: substrate/BlockHandler
          filter:
            modulo: 50
        - handler: updateDailyStats
          kind: substrate/BlockHandler
          filter:
            modulo: 600
        - handler: updateAssetsWeeklyStats
          kind: substrate/BlockHandler
          filter:
            modulo: 2400
