specVersion: 1.0.0
name: sora-subquery
version: 1.0.0
runner:
  node:
    name: '@subql/node'
    version: 1.16.0
  query:
    name: '@subql/query'
    version: 1.9.1
description: ''
repository: https://github.com/sora-xor/sora-subquery
schema:
  file: ./schema.graphql
network:
  chainId: '0x3c935e4b53f12f2c2d618486389399421648ce04981aff538936fa9d071e5c50'
  endpoint: wss://ws.framenode-1.v1.tst.sora2.soramitsu.co.jp
  chaintypes:
    file: ./types.json
dataSources:
  - kind: substrate/Runtime
    startBlock: 1
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: initializeAssets
          kind: substrate/BlockHandler
        - handler: initializePools
          kind: substrate/BlockHandler

        - handler: assetRegistrationHandler
          kind: substrate/CallHandler
          filter:
            module: assets
            method: register
        - handler: handlerTransfers
          kind: substrate/CallHandler
          filter:
            module: assets
            method: transfer
        - handler: handleSwaps
          kind: substrate/CallHandler
          filter:
            module: liquidityProxy
            method: swap
        - handler: handleSwapTransfers
          kind: substrate/CallHandler
          filter:
            module: liquidityProxy
            method: swapTransfer
        - handler: handleLiquidityDeposit
          kind: substrate/CallHandler
          filter:
            module: poolXYK
            method: depositLiquidity
        - handler: handleLiquidityRemoval
          kind: substrate/CallHandler
          filter:
            module: poolXYK
            method: withdrawLiquidity
        - handler: handlerIrohaMigration
          kind: substrate/CallHandler
          filter:
            module: irohaMigration
            method: migrate
        - handler: batchTransactionsHandler
          kind: substrate/CallHandler
          filter:
            module: utility
            method: batchAll
        - handler: soraEthTransferHandler
          kind: substrate/CallHandler
          filter:
            module: ethBridge
            method: transferToSidechain
        - handler: rewardsHandler
          kind: substrate/CallHandler
          filter:
            module: pswapDistribution
            method: claimIncentive
        - handler: rewardsHandler
          kind: substrate/CallHandler
          filter:
            module: rewards
            method: claim
        - handler: rewardsHandler
          kind: substrate/CallHandler
          filter:
            module: vestedRewards
            method: claimRewards
        - handler: rewardsHandler
          kind: substrate/CallHandler
          filter:
            module: vestedRewards
            method: claimCrowdloanRewards
        - handler: setReferralHandler
          kind: substrate/CallHandler
          filter:
            module: referrals
            method: setReferrer
        - handler: referralReserveHandler
          kind: substrate/CallHandler
          filter:
            module: referrals
            method: reserve
        - handler: referralUnreserveHandler
          kind: substrate/CallHandler
          filter:
            module: referrals
            method: unreserve
        - handler: demeterDepositHandler
          kind: substrate/CallHandler
          filter:
            module: demeterFarmingPlatform
            method: deposit
        - handler: demeterWithdrawHandler
          kind: substrate/CallHandler
          filter:
            module: demeterFarmingPlatform
            method: withdraw
        - handler: demeterGetRewardsHandler
          kind: substrate/CallHandler
          filter:
            module: demeterFarmingPlatform
            method: getRewards

        - handler: ethSoraTransferHandler
          kind: substrate/EventHandler
          filter:
            module: ethBridge
            method: IncomingRequestFinalized
        - handler: ethSoraTransferHandler
          kind: substrate/EventHandler
          filter:
            module: ethBridge
            method: IncomingRequestFinalizationFailed
        # burn token
        - handler: handleTokenBurn
          kind: substrate/EventHandler
          filter:
            module: tokens
            method: Withdrawn
        # burn XOR
        - handler: handleXorBurn
          kind: substrate/EventHandler
          filter:
            module: balances
            method: Withdraw
        # mint token
        - handler: handleTokenMint
          kind: substrate/EventHandler
          filter:
            module: tokens
            method: Deposited
        # mint XOR
        - handler: handleXorMint
          kind: substrate/EventHandler
          filter:
            module: balances
            method: Deposit
        - handler: handleNetworkFee
          kind: substrate/EventHandler
          filter:
            module: xorFee
            method: FeeWithdrawn
        - handler: referrerRewardHandler
          kind: substrate/EventHandler
          filter:
            module: xorFee
            method: ReferrerRewarded

        - handler: handleTransferEvent
          kind: substrate/EventHandler
          filter:
            module: balances
            method: Transfer
        - handler: handleTransferEvent
          kind: substrate/EventHandler
          filter:
            module: tokens
            method: Transfer

        - handler: syncPoolXykPrices
          kind: substrate/BlockHandler

        - handler: syncModels
          kind: substrate/BlockHandler
          filter:
            modulo: 50
