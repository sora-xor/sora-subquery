@Library('jenkins-library')

String agentLabel        = 'docker-build-agent'
String envImageName      = 'node:14.16.1-buster-slim'
String subqueryToken     = 'subquery-token'
String targetEnvironment =  getEnvFromJobName()
String jobList           = '../sora2-' + targetEnvironment
List   jobParams         = [
    string(defaultValue: targetEnvironment, name: 'targetEnvironment', trim: true),
    booleanParam(defaultValue: false, name: 'fullClean'),
    booleanParam(defaultValue: false, name: 'createProject'),
    booleanParam(defaultValue: false, name: 'stagingSlot'),
    ]
String endpoint          = targetEnvironment == 'dev' ? '3.s3.dev' : '1.v1.tst'
String telegramChatId    = 'telegram-deploy-chat-id'
Boolean statusNotif      = true


properties([
    parameters( jobParams ),
    pipelineTriggers([upstream( jobList )])
])

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        timestamps()
        disableConcurrentBuilds()
    }
    agent {
        docker {
            label agentLabel
            image envImageName
        }
    }
    environment {
        SUBQUERY_CLI_VERSION = '1.7.0'
        SUBQUERY_INDEXER_VERSION = 'v1.9.1'
        SUBQUERY_NODE_VERSION = 'v1.5.0'
        SUBQUERY_CLI_VERSION_STAGING = '1.6.1'
        SUBQUERY_INDEXER_VERSION_STAGING = 'v1.9.1'
        SUBQUERY_NODE_VERSION_STAGING = 'v1.5.0'
        SUBQUERY_ORG =  'sora-xor'
        SUBQUERY_PROJECT_DB = 'sora'
        matrix_chain = "sora-${targetEnvironment}"
        SUBQL_ACCESS_TOKEN = credentials("${subqueryToken}")
        TELEGRAM_CHAT_ID = credentials("${telegramChatId}")
    }

    stages {
        stage('Validation before deployment') {
            steps {
                script {
                    sh """
                       npm install -g @subql/cli@${SUBQUERY_CLI_VERSION}
                       subql validate
                    """
                }
            }
        }
        stage('Deleting a project if needed') {
            when {
                expression {params.fullClean}
            }
            steps {
                script {
                    sh """
                    subql project:delete-project \
                    --org=${SUBQUERY_ORG} \
                    --projectName=${matrix_chain}
                    echo project ${matrix_chain} is deleted
                """
                }
            }
        }
        stage('Creating a project if needed') {
            when { anyOf {
                expression {params.fullClean}
                expression {params.createProject}
                }
            }
            steps {
                script {
                    sh """
                    subql project:create-project \
                    --org=${SUBQUERY_ORG} \
                    --dedicatedDB=${SUBQUERY_PROJECT_DB} \
                    --projectName=${matrix_chain} \
                    --gitRepo=https://github.com/sora-xor/sora-subquery
                    echo project ${matrix_chain} is created
                """
                }
            }
        }
        stage('Install Dependencies & Deploy in production slot') {
            steps {
                script {
                    sh """
                       apt-get update && apt-get install curl -y
                       npm install -g typescript
                       npm install tslib
                       npm link typescript
                       yarn
                       yarn codegen
                       RESULT=\$(subql publish -f project.yaml  | grep -oP ': \\K.*')
                       subql deployment:deploy \
                       --indexerVersion=${SUBQUERY_INDEXER_VERSION} \
                       --queryVersion=${SUBQUERY_NODE_VERSION} \
                       --org=${SUBQUERY_ORG} \
                       --indexerSubscription \
                       --querySubscription \
                       --dict=dict \
                       --ipfsCID=\$RESULT \
                       --projectName=${matrix_chain} \
                       --endpoint=wss://ws.framenode-${endpoint}.sora2.soramitsu.co.jp
                       echo "New deployment in production slot is executed"
                    """
                }
            }
        }
        stage('Install Dependencies & Deploy in staging slot') {
            when {
                expression {params.stagingSlot}
            }
            steps {
                script {
                    sh """
                       RESULT=\$(subql publish -f project.yaml  | grep -oP ': \\K.*')
                       subql deployment:deploy \
                       --indexerVersion=${SUBQUERY_INDEXER_VERSION_STAGING} \
                       --queryVersion=${SUBQUERY_NODE_VERSION_STAGING} \
                       --org=${SUBQUERY_ORG} \
                       --dict=dict \
                       --indexerSubscription \
                       --querySubscription \
                       --ipfsCID=\$RESULT \
                       --projectName=${matrix_chain} \
                       --endpoint=wss://ws.framenode-${endpoint}.sora2.soramitsu.co.jp
                       --type=stage
                       echo "New deployment in staging slot is executed"
                    """
                }
            }
        }
        stage ('Send Notification about deploy') {
            steps {
                pushNotiTelegram(
                  status: statusNotif,
                  telegramChatId: "${TELEGRAM_CHAT_ID}"
                ) 
            }
        }
    }
    post {
        cleanup { cleanWs() }
    }
}