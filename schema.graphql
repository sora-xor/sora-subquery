type PoolXYKEntity @entity {
  id: ID!
  pools: [Pool] @derivedFrom(field: "poolEntity")
  totalXORInPools: String!
  updated: String!
}

type Pool @entity {
  id: ID!
  baseAssetId: String!
  targetAssetId: String! @index
  strategicBonusApy: String
  priceUSD: String
  baseAssetReserves: String!
  targetAssetReserves: String!
  multiplier: BigInt!
  poolEntity: PoolXYKEntity! @index #relation to PoolXYKEntity
  updated: String!
}

type HistoryElement @entity {
  id: ID!
  blockHeight: BigInt!
  blockHash: String! @index
  module: String!
  method: String!
  address: String! @index
  networkFee: String!
  execution: ExecutionResult!
  timestamp: Int!
  data: HistoryElementDetails
}


type ExecutionResult @jsonField {
  success: Boolean!
  error: Error
}

type Error @jsonField {
  moduleErrorId: Int
  moduleErrorIndex: Int
  nonModuleErrorMessage: String
}

type HistoryElementDetails @jsonField {
  data: String # API is implemented by bypassing the scheme - `data` in all mappings is an object, not a String. See https://github.com/subquery/subql/issues/522.
}

type BurnedAssetsAmount @entity {
  id: ID!
  blockHeight: BigInt! @index
  blockHash: String!
  currencyId: String!
  balance: BigInt!
}

type RemintedAssetsAmount @entity {
  id: ID!
  blockHeight: BigInt! @index
  blockHash: String!
  currencyId: String!
  balance: BigInt!
}

type ClaimableReward @entity {
  id: ID!
  blockHeight: BigInt! @index
  blockHash: String!
  from: String!
  currencyId: String!
  balance: BigInt!
}

type ReferrerReward @entity {
	id: ID!
	blockHeight: BigInt!
	referral: String! @index
	referrer: String!
	timestamp: Int!
	amount: BigInt!
}
